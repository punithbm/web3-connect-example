import Head from "next/head";
import { Button } from "@frontierwallet/front-ui";
import { useEffect, useState } from "react";
import Web3 from "web3";
import { ethers } from "ethers";

let provider: Web3;
let providerEthers: ethers.providers.Web3Provider;
declare global {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  interface Window {
    ethereum: any;
    frontier: any;
  }
}
export default function Home() {
  const [address, setAddress] = useState("");
  const [balance, setBalance] = useState("");
  const [chainId, setChainId] = useState("");

  const switchEthereumChain = async (chainID: string) => {
    if (window && window.ethereum) {
      console.log("window.ethereum");
      await window.ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [
          {
            chainId: chainID,
          },
        ],
      });
    } else {
      console.log("No frontier wallet");
    }
  };

  const initEthers = async () => {
    providerEthers = new ethers.providers.Web3Provider(
      window.frontier.ethereum
    );
    const acc = await providerEthers.send("eth_requestAccounts", []);
    setAddress(acc[0]);
    console.log(acc, "Accounts");
    const balance = await providerEthers.getBalance(acc[0]);
    const convertedBal = ethers.utils.formatEther(balance);
    setBalance(convertedBal);
    console.log(convertedBal, "Balance");
  };

  const signMessage = async () => {
    console.log("Ethers sign");
    const params = [
      {
        from: "0x3205a5fdecd481a8383b9e8cab268749839d222e",
        to: "0xfbdd194376de19a88118e84e279b977f165d01b8",
        gas: "0x11170",
        gasPrice: "0x3548e64410",
        value: "0x0",
        data: "0x095ea7b300000000000000000000000038f7aa5370439e879370e24add063a11bd74610d00000000000000000000000000000000000000000000000000010b0c9fc361d0",
      },
    ];
    const signer = providerEthers.getSigner();
    const signTransaction = await providerEthers.send("eth_sendTransaction", [
      params,
    ]);
    console.log(signTransaction, "Sign Transaction");
  };

  const checkBalance = async () => {
    try {
      const newAccounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
      provider = await new Web3(window.ethereum);
      const from = newAccounts[0];
      setAddress(from);
      checkBalanceAndID(from);
    } catch (error) {}
  };

  const connectWallet = async () => {
    if (window.ethereum) {
      if (window.ethereum.isFrontier || window) {
        await checkBalance();
      } else {
        console.log("No frontier wallet");
      }
    }
  };

  const sendTransaction = async () => {
    // console.log("Web3");
    if (provider) {
      const params = [
        {
          from: "0x3205a5fdecd481a8383b9e8cab268749839d222e",
          to: "0xfbdd194376de19a88118e84e279b977f165d01b8",
          gas: "0x11170",
          gasPrice: "0x3548e64410",
          value: "0x0",
          data: "0x095ea7b300000000000000000000000038f7aa5370439e879370e24add063a11bd74610d00000000000000000000000000000000000000000000000000010b0c9fc361d0",
        },
      ];
      try {
        const sign = await provider.eth.givenProvider.request({
          method: "eth_sendTransaction",
          params: params,
        });
        console.log(sign, "sign");
      } catch (error) {}
    }
  };

  const sendTransactionDummy = async () => {
    console.log("2 called");
    if (provider) {
      const params = [
        {
          from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
          to: "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
          gas: "0x76c0", // 30400
          gasPrice: "0x9184e72a000", // 10000000000000
          value: "0x9184e72a", // 2441406250
          data: "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",
        },
      ];
      try {
        const sign = await provider.eth.givenProvider.request({
          method: "eth_sendTransaction",
          params: params,
        });
        console.log(sign, "sign");
      } catch (error) {}
    }
  };

  useEffect(() => {
    if (provider) {
      window.ethereum.on("chainChanged", (chainId: string) => {
        console.log("chainId changed ", chainId);
        connectWallet();
        checkBalanceAndID(address);
      });
    }
  }, [provider]);

  const checkBalanceAndID = async (from: string) => {
    if (provider) {
      const chainId = await provider.eth.getChainId();
      const balance = await provider.eth.getBalance(from);
      console.log("balance fetched ", balance);
      console.log("chainId fetched ", chainId);
      const convertedBal = (Number(balance) /
        Math.pow(10, 18)) as unknown as string;
      setBalance(convertedBal);
      setChainId(`${chainId}`);
      return;
    } else {
      console.log("provider not set");
    }
  };

  return (
    <>
      <Head>
        <title>Web3 Connect Example</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="flex flex-col relative mt-10 mx-auto justify-center container">
          <Button
            className={`text-white ${
              address ? "w-[100px]" : "w-[150px]"
            }  flex items-center bg-black rounded-lg p-2 mb-5`}
            disabled={address ? true : false}
            onClick={() => initEthers()}
          >
            {address ? "Connected" : "Connect Wallet"}
          </Button>
          <Button
            className={`text-white ${
              address ? "w-[100px]" : "w-[150px]"
            }  flex items-center bg-black rounded-lg p-2 mb-5`}
            disabled={address ? true : false}
            onClick={() => {
              connectWallet();
              initEthers();
            }}
          >
            {address ? "Connected" : "Connect Wallet using web3.js"}
          </Button>
          {chainId && chainId != "137" && (
            <Button
              className={`text-white w-[200px] flex items-center bg-black rounded-lg p-2 mb-5`}
              onClick={() => switchEthereumChain("0x89")}
            >
              {"Switch to Polygon"}
            </Button>
          )}
          {chainId && chainId != "1" && (
            <Button
              className={`text-white w-[200px] flex items-center bg-black rounded-lg p-2 mb-5`}
              onClick={() => switchEthereumChain("0x1")}
            >
              {"Switch to Ethereum"}
            </Button>
          )}
          <Button
            className={`text-white w-[200px] flex items-center bg-black rounded-lg p-2 mb-5`}
            onClick={() => signMessage()}
          >
            {"Approve Transaction"}
          </Button>
          <Button
            className={`text-white w-[200px] flex items-center bg-black rounded-lg p-2 mb-5`}
            onClick={() => {
              sendTransaction();
              sendTransaction();
              setTimeout(() => {}, 1000);
            }}
          >
            {"Approve Transaction using web3.js"}
          </Button>
          {address && (
            <p className="text-text-900 text-lg font-normal">
              <span className="text-text-300">Address: </span>
              {address}
            </p>
          )}
          {balance !== "" && (
            <p className="text-text-900 text-lg font-normal">
              <span className="text-text-300">Balance: </span>
              {balance}
            </p>
          )}
          {chainId && (
            <p className="text-text-900 text-lg font-normal">
              <span className="text-text-300">Chain Id: </span>
              {chainId}
            </p>
          )}
        </div>
      </main>
    </>
  );
}
