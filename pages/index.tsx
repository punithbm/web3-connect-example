import Head from 'next/head';
import { Button } from '@frontierwallet/front-ui';
import { useEffect, useState } from 'react';
import Web3 from 'web3';

let provider: Web3;
declare global {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  interface Window {
    ethereum: any;
    frontier: any;
  }
}
export default function Home() {
  const [address, setAddress] = useState('');
  const [balance, setBalance] = useState('');
  const [chainId, setChainId] = useState('');

  const switchEthereumChain = async (chainID: string) => {
    if (window.frontier && window.frontier.ethereum) {
      console.log('window.ethereum');
      await window.frontier.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [
          {
            chainId: chainID,
          },
        ],
      });
    } else {
      console.log('No frontier wallet');
    }
  };

  const checkBalance = async () => {
    try {
      const newAccounts = await window.frontier.ethereum.request({
        method: 'eth_requestAccounts',
      });
      provider = await new Web3(window.frontier.ethereum);
      const from = newAccounts[0];
      setAddress(from);
      checkBalanceAndID(from);
    } catch (error) {}
  };

  const connectWallet = async () => {
    if (window.ethereum) {
      if (window.ethereum.isFrontier || window.frontier) {
        await checkBalance();
      } else {
        console.log('No frontier wallet');
      }
    }
  };

  useEffect(() => {
    if (provider) {
      window.frontier.ethereum.on('chainChanged', (chainId: string) => {
        console.log('chainId changed ', chainId);
        connectWallet();
        checkBalanceAndID(address);
      });
    }
  }, [provider]);

  const checkBalanceAndID = async (from: string) => {
    if (provider) {
      const chainId = await provider.eth.getChainId();
      const balance = await provider.eth.getBalance(from);
      console.log('balance fetched ', balance);
      console.log('chainId fetched ', chainId);
      const convertedBal = (Number(balance) / Math.pow(10, 18)) as unknown as string;
      setBalance(convertedBal);
      setChainId(`${chainId}`);
      return;
    } else {
      console.log('provider not set');
    }
  };

  return (
    <>
      <Head>
        <title>Web3 Connect Example</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="flex flex-col relative mt-10 mx-auto justify-center container">
          <Button className={`text-white ${address ? 'w-[100px]' : 'w-[150px]'}  flex items-center bg-black rounded-lg p-2 mb-5`} disabled={address ? true : false} onClick={() => connectWallet()}>
            {address ? 'Connected' : 'Connect Wallet'}
          </Button>
          {chainId && chainId != '137' && (
            <Button className={`text-white w-[200px] flex items-center bg-black rounded-lg p-2 mb-5`} onClick={() => switchEthereumChain('0x89')}>
              {'Switch to Polygon'}
            </Button>
          )}
          {chainId && chainId != '1' && (
            <Button className={`text-white w-[200px] flex items-center bg-black rounded-lg p-2 mb-5`} onClick={() => switchEthereumChain('0x1')}>
              {'Switch to Ethereum'}
            </Button>
          )}
          {address && (
            <p className="text-text-900 text-lg font-normal">
              <span className="text-text-300">Address: </span>
              {address}
            </p>
          )}
          {balance !== '' && (
            <p className="text-text-900 text-lg font-normal">
              <span className="text-text-300">Balance: </span>
              {balance}
            </p>
          )}
          {chainId && (
            <p className="text-text-900 text-lg font-normal">
              <span className="text-text-300">Chain Id: </span>
              {chainId}
            </p>
          )}
        </div>
      </main>
    </>
  );
}
